<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYExportExpressions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYExportExpressions
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SPYExportExpressions    exportExpressions = new SPYExportExpressions();

        exportExpressions.createAndDownloadExcelFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndDownloadExcelFile</Name>
				<Source><![CDATA[
    public void createAndDownloadExcelFile()
    {
        DocuFileSaveResult saveResult = DocuFileSave::promptForSaveLocation('ExpressionConditions', "xlsx", null, 
                                                                                "Export to excel");
         
        if (saveResult && saveResult.parmAction() != DocuFileSaveAction::Cancel)
        {
            saveResult.parmOpenParameters('web=1');
            saveResult.parmOpenInNewWindow(false);

            System.IO.Stream workbookStream = new System.IO.MemoryStream();
             
             
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();

            using (var package = new OfficeOpenXml.ExcelPackage(memoryStream))
            {
                SPYExpressionTable              expressionTable;
                SPYExpressionCondition          expressionCondition;
                SPYExpressionConditionValue     expressionConditionValue;
                int                             row = 2;

                var worksheets = package.get_Workbook().get_Worksheets();
                var worksheet = worksheets.Add('Expressions');
                var cells = worksheet.get_Cells();
                
                var cell = cells.get_Item(1,1);
                cell.set_Value('Expression');

                var cell02 = cells.get_Item(1,2);
                cell02.set_Value('Condition');

                var cell03 = cells.get_Item(1,3);
                cell03.set_Value('Condition Value');

                while select expressionTable
                {
                    select firstonly expressionCondition
                        where expressionCondition.Expression == expressionTable.RecId;

                    select firstonly expressionConditionValue
                        where expressionConditionValue.ExpressionCondition == expressionCondition.RecId;

                    var cell04 = cells.get_Item(row,1);
                    cell04.set_Value(expressionTable.ExpressionCode);

                    var cell05 = cells.get_Item(row,2);
                    cell05.set_Value(expressionCondition.Description);

                    var cell06 = cells.get_Item(row,3);
                    cell06.set_Value(expressionConditionValue.Expression);
                    row++;
                }

                package.Save();
            }

            memoryStream.Seek(0, System.IO.SeekOrigin::Begin);

            DocuFileSave::processSaveResult(memoryStream, saveResult); // Download the file.
        }

       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>