<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYEOSUnpostService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYEOSUnpostService  extends SysOperationServiceBase
{
    SPYPayrollLedger    spyPayrollLedger;
    SPYBenefitLedger    spyBenefitLedger;
    SPYEOSRunBenefit    spyEOSRunBenefit;
    SPYEOSRunPayroll    spyEOSRunPayroll;
    SPYEOSRunTable      spyEOSRunTable;
    SPYEOSRunRecId      spyEOSRunRecId;
    int64                 recordCount;
                              
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>unPost</Name>
				<Source><![CDATA[
    public void unPost(SPYEOSUnpostContract spyEosUnpostContract)
    {
        spyEOSRunRecId = spyEosUnpostContract.parmSPYEOSRunRecId();
        spyEOSRunTable = spyEOSRunTable::find( spyEOSRunRecId );

        if ( spyEOSRunTable )
        {
            select count(RecId) 
            from spyPayrollLedger 
            join spyEOSRunPayroll
                where spyEOSRunPayroll.PayrollLedger == spyPayrollLedger.RecId
                && SPYPayrollLedger.IsFinalised == NoYes::Yes
                && SPYPayrollLedger.Worker == spyEOSRunTable.Worker //N Line
            join spyEOSRunTable 
                where spyEOSRunTable.RecId == SPYEOSRunPayroll.EOSRun;

            recordCount = spyPayrollLedger.RecId;

            select count(RecId)
            from spyBenefitLedger
            join spyEOSRunBenefit
                where spyEOSRunBenefit.BenefitLedger == spyBenefitLedger.RecId
                && spyBenefitLedger.IsFinalised == NoYes::Yes
                && spyBenefitLedger.Worker == spyEOSRunTable.Worker //N Line
            join spyEOSRunTable
                where spyEOSRunTable.RecId == spyEOSRunBenefit.EOSRun;

            recordCount += spyBenefitLedger.RecId;

            if ( recordCount) 
            {
                Error("Cannot unpost due to finalized ledgers.");
            }
            else
            {
                ttsbegin;
                delete_from spyPayrollLedger
                    exists join spyEOSRunPayroll
                    where spyEOSRunPayroll.PayrollLedger == SPYPayrollLedger.RecId
                        && spyEOSRunPayroll.EOSRun == spyEOSRunRecId
                    && spyPayrollLedger.IsFinalised == NoYes::No
                    && spyPayrollLedger.SourceDocument == tableNum(SPYEOSRunTable);

                delete_from spyBenefitLedger
                    exists join spyEOSRunBenefit                    
                    where spyEOSRunBenefit.BenefitLedger == spyBenefitLedger.RecId
                        && spyEOSRunBenefit.EOSRun == spyEOSRunRecId
                    && spyBenefitLedger.IsFinalised == NoYes::No
                    && spyBenefitLedger.SourceDocument == tableNum(SPYEOSRunTable);

                update_recordset spyEOSRunTable
                    setting PostedToLedger = NoYes::No
                    , WorkflowStatus = SPYWorkflowStatus::Created,
                    IsFinalised = NoYes::No
                    where spyEOSRunTable.RecId == spyEOSRunRecId;

                while select forupdate spyEOSRunBenefit
                    where spyEOSRunBenefit.EOSRun == spyEOSRunRecId
                {
                    select firstonly spyBenefitLedger
                        where spyBenefitLedger.RecId == spyEOSRunBenefit.BenefitLedger;
                    if(!spyBenefitLedger)
                    {
                        spyEOSRunBenefit.BenefitLedger = 0;
                        spyEOSRunBenefit.update();
                    }
                }

                while select forupdate spyEOSRunPayroll
                    where spyEOSRunPayroll.EOSRun == spyEOSRunRecId
                {
                    select firstonly spyPayrollLedger
                        where spyPayrollLedger.RecId == spyEOSRunPayroll.PayrollLedger;
                    if(!spyPayrollLedger)
                    {
                        spyEOSRunPayroll.PayrollLedger = 0;
                        spyEOSRunPayroll.update();
                    }
                }
                ttscommit;
                Info( "EOS unposted");
            }
        }
        else
        {
            Error( "EOS record not found" );
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>