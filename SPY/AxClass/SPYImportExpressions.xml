<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYImportExpressions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYImportExpressions extends RunBaseBatch
{
    SPYExpressionCondition              expressionCondition;
    SPYExpressionConditionValue         expressionConditionValue;
    SPYExpressionTable                  expressionTable, expressionTableExists;
    SPYExpression                       conditionValue;

    private str                     availableTypes = ".xlsx";
    private const str               OkButtonName = 'OkButton';
    private const str               FileUploadName = 'FileUpload';
    str                             textFile;
    DialogRunbase                   dialog;
    
    
    // Packed variables
    TransDate                       transDate;
    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        transDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup      dialogGroup;
        FormBuildControl formBuildControl;
        FileUploadBuild  dialogFileUpload;
        Set              enumSet = new Set(Types::Enum);
        #resAppl
        ;
        
        dialog = super();
        dialog.addImage(#ImageExcel_Dyn01);
        dialog.addInfoImage();
        dialogGroup = dialog.addGroup("File path");
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());
        
        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), FileUploadName);
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileTypesAccepted(availableTypes);
        dialogFileUpload.fileNameLabel("@SYS308842");
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        FileUpload fileUpload = this.getFormControl(_dialog, FileUploadName);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    protected void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(dialog, FileUploadName);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);
                
        textFile = fileUpload.fileName();

        this.setDialogOkButtonEnabled(dialog, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        SPYImportExpressions   importExpressions;
        #OCCRetryCount
        if (! this.validate())
            throw error("");

        try
        {
                
            ttsbegin;
            this.processCSVFile();
            ttscommit;
            info("Completed");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (false)
            return checkFailed("");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static SPYImportExpressions construct()
    {
        return new SPYImportExpressions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Here goes a description of the class
    static ClassDescription description()
    {
        return 'Import expressions';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SPYImportExpressions    importExpressions;

        importExpressions = SPYImportExpressions::construct();

        if (importExpressions.prompt())
            importExpressions.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCSVFile</Name>
				<Source><![CDATA[
    void processCSVFile()
    {
        #File
            
        //str                             title;
        //container                       currentLine;
        //int                             totalOfLines;
        //CommaTextStreamIo               localStream;
        //int                             currentLineNo;
        //str                             lineContent;
                        
        FileUpload fileUploadControl = this.getFormControl(dialog, FileUploadName);
        
        FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();
        
        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            textFile = fileUploadResult.getDownloadUrl();
        }
        System.IO.Stream stream  = fileUploadResult.openResult();
        this.importFromExcelfiles(stream);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFromExcelfiles</Name>
				<Source><![CDATA[
    public boolean importFromExcelfiles(System.IO.Stream _stream)
    {
        OfficeOpenXml.ExcelWorksheet        worksheet;
        OfficeOpenXml.ExcelRange            cells;
        OfficeOpenXml.ExcelPackage          package = new OfficeOpenXml.ExcelPackage(_stream);

        str                                 expressionCode, description;
        System.ArgumentException            ex;

        int totalRows,totalCells,rowCounter,cellCounter;

        if(package)
        {
            try
            {
                worksheet       = package.get_Workbook().get_Worksheets().get_Item(1);
                cells           = worksheet.Cells;
                totalRows       = worksheet.Dimension.End.Row ;
                totalCells      = worksheet.Dimension.End.Column;

                for (rowCounter = 2; rowCounter<= totalRows; rowCounter++)
                {
                    expressionCode  = cells.get_Item(rowCounter, 1).value;
                    description     = cells.get_Item(rowCounter, 2).value;
                    conditionValue = cells.get_Item(rowCounter, 3).value;

                    select firstonly expressionTableExists
                        where expressionTableExists.ExpressionCode == expressionCode;

                    if(!expressionTableExists)
                    {
                        expressionTable.initValue();
                        expressionTable.ExpressionCode  = expressionCode;
                        expressionTable.Description     = description;
                        expressionTable.insert();

                        if(expressionTable)
                        {
                            expressionCondition.initValue();
                            expressionCondition.Expression = expressionTable.RecId;
                            expressionCondition.Description = 'Default';
                            expressionCondition.LineNum = 1;
                            expressionCondition.insert();
                        }

                        if(expressionCondition)
                        {
                            expressionConditionValue.initValue();
                            expressionConditionValue.ExpressionCondition = expressionCondition.RecId;
                            expressionConditionValue.Expression = conditionValue;
                            expressionConditionValue.insert();
                        }
                    }
                }
            }
            catch (ex)
            {
                error(ex.Message);
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>