<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYBenefitCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYBenefitCalculation extends SPYIBenefitCalculation implements SPYIObservable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addObserver</Name>
				<Source><![CDATA[
    public void addObserver(SPYIObserver    _iObserver,
                            int             _key)
    {
        observers.value(_key, _iObserver);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAccCurAmt</Name>
				<Source><![CDATA[
    public SPYAmount calcAccCurAmt()
    {
        SPYExpressionRecId              expression;
        SPYExpressionCondition          expressionCondition;
        SPYAmount                       amountValue;
        //SPYExpressionEvaluationEngine   expressionEvaluationEngine = new SPYExpressionEvaluationEngine(SPYProcess::PayProcess);
    
        expression = SPYBenefitDetails::findByBenefit(benefit,legalEntity,periodStart,periodEnd).AmountExp;
        //expressionEvaluationEngine.addObserver(tracer,1);
        while select RecId from expressionCondition
            where expressionCondition.Expression == expression
        {
            if(expressionEvaluationEngine.validateCondition(expressionCondition.RecId,legalEntity,worker))
            {
                //expressionEvaluationEngine.parmExpressionContext(expressionContext);
                amountValue += expressionEvaluationEngine.evaluateExpression(expressionCondition.RecId);
            }
        }
    
        return amountValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEncashmentAccCurAmt</Name>
				<Source><![CDATA[
    public SPYAmount calcEncashmentAccCurAmt()
    {
        SPYExpressionRecId              expression;
        SPYExpressionCondition          expressionCondition;
        SPYAmount                       amountValue;
        //SPYExpressionEvaluationEngine   expressionEvaluationEngine = new SPYExpressionEvaluationEngine(SPYProcess::PayProcess);
    
        expression = SPYBenefitDetails::findByBenefit(benefit,legalEntity,periodStart,periodEnd).EncashmentAmountExp;
        //expressionEvaluationEngine.addObserver(tracer,1);
        while select RecId from expressionCondition
            where expressionCondition.Expression == expression
        {
            if(expressionEvaluationEngine.validateCondition(expressionCondition.RecId,legalEntity,worker))
            {
                //expressionEvaluationEngine.parmExpressionContext(expressionContext);
                amountValue += expressionEvaluationEngine.evaluateExpression(expressionCondition.RecId);
            }
        }
    
        return amountValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEncashmentQty</Name>
				<Source><![CDATA[
    public SPYAmount calcEncashmentQty()
    {
        SPYExpressionRecId              expression;
        SPYExpressionCondition          expressionCondition;
        SPYAmount                       qtyValue;
        //SPYExpressionEvaluationEngine   expressionEvaluationEngine = new SPYExpressionEvaluationEngine(SPYProcess::PayProcess);
    
        expression = SPYBenefitDetails::findByBenefit(benefit,legalEntity,periodStart,periodEnd).EncahmentQuantityExp;
        //expressionEvaluationEngine.addObserver(tracer,1);
        while select expressionCondition
            where expressionCondition.Expression == expression
        {
            if(expressionEvaluationEngine.validateCondition(expressionCondition.RecId,legalEntity,worker))
            {
                //expressionEvaluationEngine.parmExpressionContext(expressionContext);
                qtyValue += expressionEvaluationEngine.evaluateExpression(expressionCondition.RecId);
            }
        }
    
        return qtyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    public SPYAmount calcQty()
    {
        SPYExpressionRecId              expression;
        SPYExpressionCondition          expressionCondition;
        SPYAmount                       qtyValue;
        //SPYExpressionEvaluationEngine   expressionEvaluationEngine = new SPYExpressionEvaluationEngine(SPYProcess::PayProcess);
    
        expression = SPYBenefitDetails::findByBenefit(benefit,legalEntity,periodStart,periodEnd).QuantityExp;
        //expressionEvaluationEngine.addObserver(tracer,1);
        while select expressionCondition
            where expressionCondition.Expression == expression
        {
            if(expressionEvaluationEngine.validateCondition(expressionCondition.RecId,legalEntity,worker))
            {
                //expressionEvaluationEngine.parmExpressionContext(expressionContext);
                qtyValue += expressionEvaluationEngine.evaluateExpression(expressionCondition.RecId);
            }
        }
    
        return qtyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyObserver</Name>
				<Source><![CDATA[
    public void notifyObserver(str      _propertyName,
                               str      _propertyValue,
                               int      _heading = 0,
                               int      _space = 0)
    {
        SPYIObserver    localObserver;
        int             ctr;
    
        for (Ctr = 1; Ctr <= observers.lastIndex(); Ctr++ )
        {
            localObserver = observers.value(Ctr);
            localObserver.changed(this, _propertyName, _propertyValue,_heading,_space);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBenefit</Name>
				<Source><![CDATA[
    public SPYBenefitLedgerTmp processBenefit(SPYExpressionEvaluationEngine   _expressionEvaluationEngine)
    {
        //expressionContext = _expressionContext;
        expressionEvaluationEngine = _expressionEvaluationEngine;
        this.addObserver(tracer,1);
        try
        {
            transactionCurrencyAmount = this.calcAccCurAmt();
            qty = this.calcQty();
    
            return this.initializeLedgerTmpFromBenefit(workerPositionBenefit,transactionCurrencyAmount,qty);
        }
        catch(Exception::Error)
        {
            error(strFmt("@SPY390",SPYPayElementTable::find(benefit).PayElementCode,
                  HcmWorker::find(worker).name()));
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBenefitEncashment</Name>
				<Source><![CDATA[
    public SPYBenefitLedgerTmp processBenefitEncashment(SPYExpressionEvaluationEngine   _expressionEvaluationEngine)//SPYExpressionContext _expressionContext)
    {
        //expressionContext = _expressionContext;
        expressionEvaluationEngine = _expressionEvaluationEngine;
        this.addObserver(tracer,1);
        try
        {
            transactionCurrencyAmount = this.calcEncashmentAccCurAmt();
            //qty = this.calcEncashmentQty();
    
            return this.initializeLedgerTmpFromBenefit(workerPositionBenefit,transactionCurrencyAmount,qty);
        }
        catch(Exception::Error)
        {
            error(strFmt("@SPY390",SPYPayElementTable::find(benefit).PayElementCode,
                  HcmWorker::find(worker).name()));
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeObserver</Name>
				<Source><![CDATA[
    public void removeObserver(int _key)
    {
        observers.value(_key, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionTrace</Name>
				<Source><![CDATA[
    public SPYExpressionTraceRecId getExpressionTrace()
    {
        SPYIObserver                localObserver;
        int                         ctr;
        SPYExpressionTraceRecId     expressionTrace;
    
        for (Ctr = 1; Ctr <= observers.lastIndex(); Ctr++ )
        {
            localObserver = observers.value(Ctr);
            expressionTrace = localObserver.getExpressionTrace();
        }

        return expressionTrace;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>