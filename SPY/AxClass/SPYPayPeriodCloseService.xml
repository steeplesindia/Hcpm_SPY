<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYPayPeriodCloseService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYPayPeriodCloseService extends SysOperationServiceBase
{
    LegalEntityRecId                    legalEntity;
    SPYPayrollPeriodLineRecId           payrollPeriodLine;
    SPYPayrollPeriodLine                payrollPeriodLineTab,nextPayrollPeriodLineTab;
    SPYPayrollPeriod                    payrollPeriod;
    date                                periodStart,periodEnd;
    date                                nextPeriodStart,nextPeriodEnd;
    HcmWorker                           hcmWorker;
    HcmEmployment                       hcmEmployment;
    HcmEmploymentDetail                 hcmEmploymentDetail;
    QueryRun                            hcmWorkerQueryRun;

    SPYPayPeriodCloseContract           contract;
    List                                workerList;
    date                                effectiveStartDate,effectiveEndDate;
    date                                workerJoiningDate,workerTerminationDate;
    WorkCalendarTable                   workCalendarTable;
    str                                 workerValidationText;

    RecordInsertList                    absenceLedgerList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearWorkerValidationText</Name>
				<Source><![CDATA[
    protected void clearWorkerValidationText()
    {
        workerValidationText = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>closePeriod</Name>
				<Source><![CDATA[
    private void closePeriod()
    {
        #AviFiles
        SysOperationProgress    progress = new SysOperationProgress();
        int                     progressCount;
        ListEnumerator          workerListEnumerator;
    
        absenceLedgerList = new RecordInsertList(tableNum(SPYAbsenceLedger));
        workerList = new List(Types::Int64);
        legalEntity = contract.parmLegalEntity();
        this.setPeriod(contract.parmPayrollPeriodLine());
        this.setWorkerQuery(contract.parmWorkerQuery());
        progress.setCaption("@SPY1533");
        progress.setAnimation(#AviUpdate);
        progress.setTotal(workerList.elements());
        progressCount = 1;
        setPrefix(strFmt("@SPY1517",periodStart,periodEnd));
        if(this.validate() == false)
            error("@SPY1530");
        else
        {
            try
            {
                ttsBegin;
                workerListEnumerator = workerList.getEnumerator();
                while(workerListEnumerator.moveNext())
                {
                    this.clearWorkerValidationText();
                    this.setWorker(workerListEnumerator.current());
                    this.setEmployment();
                    this.setDates();
                    progress.setText(strfmt("@SPY1105", hcmWorker.name(),hcmWorker.PersonnelNumber));
                    progress.setCount(progressCount, 1);
                    if(this.ValidateWorker() == false)
                    {
                        setPrefix(strFmt("@SPY1432",hcmWorker.name(),hcmWorker.PersonnelNumber));
                        this.showWorkerValidationText();
                        error(strFmt("@SPY1541",hcmWorker.name(),hcmWorker.PersonnelNumber));
                    }
                    else
                    {
                        this.updateAbsence();
                        info(strFmt("@SPY:UpdationCompletedWorker",hcmWorker.name(),hcmWorker.PersonnelNumber));
                    }
                    progressCount++;
                }
                this.commitTransaction();
                info("@SPY1540");
                ttsCommit;
            }
            catch(Exception::Error)
            {
                ttsAbort;
                error("@SPY252");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitTransaction</Name>
				<Source><![CDATA[
    private void commitTransaction()
    {
        absenceLedgerList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedger</Name>
				<Source><![CDATA[
    protected void deleteLedger()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(SPYPayPeriodCloseContract _contract)
    {
        SPYPayPeriodCloseService        payPeriodCloseService = SPYPayPeriodCloseService::construct(_contract);
    
        changeCompany(CompanyInfo::findRecId(_contract.parmLegalEntity()).DataArea)
        {
            payPeriodCloseService.setContract(_contract);
            payPeriodCloseService.closePeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    private void setContract(SPYPayPeriodCloseContract _contract)
    {
        contract = _contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDates</Name>
				<Source><![CDATA[
    private void setDates()
    {
        workerJoiningDate = DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(hcmEmployment.ValidFrom,DateTimeUtil::getCompanyTimeZone()));
        workerTerminationDate = DateTimeUtil::date(
                                DateTimeUtil::applyTimeZoneOffset(hcmEmployment.ValidTo,DateTimeUtil::getCompanyTimeZone()));
        effectiveStartDate = max(periodStart,workerJoiningDate);
        effectiveEndDate = min(periodEnd,workerTerminationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployment</Name>
				<Source><![CDATA[
    private void setEmployment()
    {
        TransDateTime       startDateTime,endDateTime;
    
        startDateTime = DateTimeUtil::newDateTime(periodStart,00-00);
        endDateTime = DateTimeUtil::newDateTime(periodEnd,00-00);
        hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorker.RecId,legalEntity,startDateTime,endDateTime);
        hcmEmploymentDetail = HcmEmploymentDetail::findByEmployment(hcmEmployment.RecId,startDateTime,endDateTime);
        workCalendarTable = WorkCalendarTable::find(WorkCalendarEmployment::findByEmploymentRecId(hcmEmployment.RecId).CalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriod</Name>
				<Source><![CDATA[
    private void setPeriod(SPYPayrollPeriodLineRecId  _payrollPeriodLine)
    {
        payrollPeriodLine = _payrollPeriodLine;
        payrollPeriodLineTab = SPYPayrollPeriodLine::find(_payrollPeriodLine);
        payrollPeriod = SPYPayrollPeriod::find(payrollPeriodLineTab.PayrollPeriod);
        periodStart = payrollPeriodLineTab.PeriodStartDate;
        periodEnd = payrollPeriodLineTab.PeriodEndDate;
        nextPayrollPeriodLineTab = SPYPayrollPeriodLine::findNextPeriodLine(_payrollPeriodLine);
        nextPeriodStart = nextPayrollPeriodLineTab.PeriodStartDate;
        nextPeriodEnd = nextPayrollPeriodLineTab.PeriodEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorker</Name>
				<Source><![CDATA[
    private void setWorker(HcmWorkerRecId _worker)
    {
        hcmWorker = HcmWorker::find(_worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkerQuery</Name>
				<Source><![CDATA[
    private void setWorkerQuery(container _workerQuery)
    {
        hcmWorkerQueryRun = new QueryRun(_workerQuery);
        while(hcmWorkerQueryRun.next())
        {
            workerList.addEnd(hcmWorkerQueryRun.get(tableNum(HcmWorker)).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWorkerValidationText</Name>
				<Source><![CDATA[
    protected void showWorkerValidationText()
    {
        warning(workerValidationText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAbsence</Name>
				<Source><![CDATA[
    protected void updateAbsence()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedger</Name>
				<Source><![CDATA[
    protected void updateLedger()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        boolean     ret = true;
    
        if(payrollPeriodLineTab.PeriodStatus == SPYPayrollPeriodStatus::Closed)
            ret = checkFailed("@SPY1531");
        if(payrollPeriodLineTab.PeriodStatus == SPYPayrollPeriodStatus::Stopped)
            ret = checkFailed("@SPY1532");
        if(!nextPayrollPeriodLineTab)
            ret = checkFailed("@SPY1547");
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateWorker</Name>
				<Source><![CDATA[
    private boolean ValidateWorker()
    {
        boolean ret = true;
    
        if(workerJoiningDate > periodEnd || workerTerminationDate < periodStart)
        {
            workerValidationText = workerValidationText + "\n" + strFmt("@SPY1543");
            ret = false;
        }
        if(!workCalendarTable.RecId)
        {
            workerValidationText = workerValidationText + "\n" + strFmt("@SPY1538");
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static SPYPayPeriodCloseService construct(SPYPayPeriodCloseContract _contract)
    {
        SPYPayrollPeriod    payrollPeriod = SPYPayrollPeriod::find(SPYPayrollPeriodLine::find(_contract.parmPayrollPeriodLine()).PayrollPeriod);
    
        switch(payrollPeriod.PayrollFrequency)
        {
            case SPYPayrollFrequency::Annually :
                return new SPYPayAnnualPeriodCloseService();
    
            default :
                throw error(strFmt("@SPY1544",payrollPeriod.PayrollFrequency));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>