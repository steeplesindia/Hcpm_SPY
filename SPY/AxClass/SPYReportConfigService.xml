<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYReportConfigService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYReportConfigService extends SysOperationServiceBase
{
    SPYReportConfigTmp              reportConfigTmp;
    SPYPayslipHeaderFooterTmp       payslipHeaderFooterTmp;
    SPYReportConfigStagingTmp       spyRReportsTmp;

    HcmWorker                       hcmWorker;
    NoYesId                         groupByWorker, inverseSign ;
    SPYWorkerPositionPayroll        workerPositionPayroll;
    SPYPayrollLedger                payrollLedger;
    SPYBenefitLedger                benefitLedger;
    SPYReferencePayElementLedger    referenceLedger;
    SPYPayrollPeriodLine            payrollPeriodLine;
    SPYPayrollPeriodLineRecId       payrollPeriodLineRecId;
    TransDate                       periodFromDate, periodToDate;
    SPYReportConfigContract         contract ;
    SPYReportConfigTable            reportConfigTable;
    SPYReportConfigFields           reportConfigFields;
    SPYReportConfigFilterTable      reportConfigFieldFilter;
    str bodyHtml, headerHtml;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    [SysEntryPointAttribute]    
    public void runReport(SPYReportConfigContract _contract)
    {
        contract = _contract;
        this.processReport();        
        
        str background, reportBody, htmlWrapper;

        select firstonly reportConfigTable where reportConfigTable.RecId == contract.parmReportConfigRecId();
        //select the background image
        CompanyImage companyImage = companyImage::findByRecord( reportConfigTable );
        if (companyImage.Image)
        {         
            System.Byte[] byteArray = null;

            Binary binary = Binary::constructFromContainer(companyImage.Image );
            using (System.IO.MemoryStream stream = binary.getMemoryStream())
            {
                byteArray = stream.ToArray();
            }

            background = System.Convert::ToBase64String(byteArray);
        }
        
        if(reportConfigTable.Layout == SPYReportConfigLayout::Tabular)
            this.parseHtml(reportConfigTable.ReportDesign);
        while select spyRReportsTmp
        {
            //build a map of all the fields 
            Map    mappings = new Map(Types::String,Types::String);
            DictTable dt = new DictTable(spyRReportsTmp.TableId);
            int numOfFlds = dt.fieldCnt();
            for (int i = 1 ; i < numOfFlds; i++)
            {
                DictField df  = new DictField(spyRReportsTmp.TableId, dt.fieldCnt2Id(i));
                if (!df.isSystem())
                {
                    mappings.insert(df.name(), num2Str(spyRReportsTmp.(df.id()),0,2, DecimalSeparator::Auto,ThousandSeparator::Comma));
                }
            }

            //if the report has a query attached then add all the query fields to the mapping for merge
            
            if ( reportConfigTable.GroupByWorker && reportConfigTable.WorkerQuery && spyRReportsTmp.Worker)
            {
                container               packedQuery;
                Query                   workerQuery;
                QueryRun                queryRun;
                QueryBuildDataSource    qbdWorker, qbDS;
                QueryBuildRange         qbrWorkerRange;

                packedQuery = SPYReportConfigFilterTable::find( reportConfigTable.WorkerQuery).Query;
                workerQuery = new Query(packedQuery );                
                qbdWorker = workerQuery.dataSourceTable (tableNum(HcmWorker));
                qbrWorkerRange = qbdWorker.addRange( fieldNum( HcmWorker, RecId ) );
                qbrWorkerRange.value(any2Str(spyRReportsTmp.Worker));
                queryRun = new QueryRun( workerQuery );
                if (queryRun.next())
                {
                    for( int ctr=1; ctr <= workerQuery.dataSourceCount(); ctr++ )
                    {
                        qbDS = workerQuery.dataSourceNo(ctr);
                        QueryBuildFieldList qbfl = qbDS.fields();

                        for (int i = 1; i <= qbfl.fieldCount(); i++)
                        {
                            Common curRecord = queryRun.get( qbDS.table());
                            FieldId fieldId = qbfl.field(i);
                            TableId tableId = qbDS.Table();

                            DictField df  = new DictField(tableId, fieldId);
                            if (!df.isSystem())
                            {
                                str fieldName = strFmt("%1.%2", tableId2PName(tableId ),  fieldId2PName(tableId,fieldId) ) ;
                                str fieldValue =  strFmt('%1', curRecord.( fieldId ) );
                            
                                mappings.insert(fieldName, fieldValue);
                            }
                        }

                    }
                }
                else
                {
                    info( strFmt( "Employee %1 did not give results with the worker query", HcmWorker::find( spyRReportsTmp.Worker).PersonnelNumber ));
                }

            }

            //Insert static fields into map
            mappings.insert("ReportTitle", _contract.parmReportTitle());
            SPYPayrollPeriodLine  payrollPeriodLineFrom = SPYPayrollPeriodLine::find(_contract.parmPayrollPeriodlineFrom());
            SPYPayrollPeriodLine  payrollPeriodLineTo = SPYPayrollPeriodLine::find(_contract.parmPayrollPeriodlineTo());
            mappings.insert("FromPeriodCode", SPYPayrollPeriod::find(payrollPeriodLineFrom.PayrollPeriod).PayrollPeriodCode);
            mappings.insert("ToPeriodCode", SPYPayrollPeriod::find(payrollPeriodLineTo.PayrollPeriod).PayrollPeriodCode);
            mappings.insert("FromDate", strFmt("%1", payrollPeriodLineFrom.PeriodStartDate));
            mappings.insert("ToDate", strFmt("%1", payrollPeriodLineFrom.PeriodEndDate));
            mappings.insert("PeriodDays", queryValue(payrollPeriodLineFrom.PeriodEndDate - payrollPeriodLineFrom.PeriodStartDate + 1));
            mappings.insert("CompanyName", CompanyInfo::find(CompanyInfo::current()).Name);
            //

            if(reportConfigTable.Layout == SPYReportConfigLayout::Form)
            {
                SysEmailContents reportText = SysEmailMessage::stringExpand(reportConfigTable.ReportDesign, SysEmailTable::htmlEncodeParameters(mappings));
                NoYesId firstPage = reportBody == "";
                reportBody += firstPage == NoYes::Yes ? '' : '<page-before>';    //adding a page break
                //reportBody += num2Char(13) +  '<page-before>';
                reportBody += num2Char(13) +  '<div style="position:relative; width=100%; height=100%">' ;
                reportBody += num2Char(13) +  '<img src="data:image/gif;base64,' + background + '"/>';
                reportBody += num2Char(13) +   reportText ;
                reportBody += num2Char(13) +   ' </div>';
                reportBody += firstPage == NoYes::Yes ? '' : '</page-before>';    //adding a page break
                //reportBody += num2Char(13) +   ' </page-before>';
            }
            else if(reportConfigTable.Layout == SPYReportConfigLayout::Tabular)
            {
                headerHtml = SysEmailMessage::stringExpand(headerHtml, SysEmailTable::htmlEncodeParameters(mappings));
                SysEmailContents reportText = SysEmailMessage::stringExpand(bodyHtml, SysEmailTable::htmlEncodeParameters(mappings));
                //reportBody += num2Char(13) +  '<div style="position:relative; width=100%; height=100%">' ;
                //reportBody += num2Char(13) +  '<img src="data:image/gif;base64,' + background + '"/>';
                reportBody += num2Char(13) +   reportText ;
                //reportBody += num2Char(13) +   ' </div>';
            }
        }
        if(reportConfigTable.Layout == SPYReportConfigLayout::Tabular)
            reportBody = strReplace(headerHtml, "<$header>", reportBody);
        
        htmlWrapper = num2Char(13) +  ' <html>';
        htmlWrapper += num2Char(13) +  ' 	<head>';
        htmlWrapper += num2Char(13) +  ' 	<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>';
        htmlWrapper += num2Char(13) +  ' 	<title>Payroll Report</title>';

        htmlWrapper += num2Char(13) +  '   <style type="text/css" >';

        htmlWrapper += num2Char(13) +  '   @page'; //specific to pdfgenerator
        htmlWrapper += num2Char(13) +  '   {';
        htmlWrapper += num2Char(13) +  '       size: a4;';      
        htmlWrapper += num2Char(13) +  '   }';

        htmlWrapper += num2Char(13) +  '   page-before';
        htmlWrapper += num2Char(13) +  '   {';
        htmlWrapper += num2Char(13) +  '       display: block;';
        htmlWrapper += num2Char(13) +  '       page-break-before: always;';
        htmlWrapper += num2Char(13) +  '   }';

        htmlWrapper += num2Char(13) +  '   </style>';

        htmlWrapper += num2Char(13) +  ' </head>';

        htmlWrapper += num2Char(13) +  ' 	<body>';
        htmlWrapper += num2Char(13) +           reportBody;        
        htmlWrapper += num2Char(13) +  ' 	</body>';
        htmlWrapper += num2Char(13) +  ' </html>';       

        if(reportConfigTable.Format == SPYReportConfigFormat::Pdf)
        {
            System.Byte[]   arrByte;
            arrByte = SPYReportWriterPdf.reportWriter::PdfConvert2ByteArr(htmlWrapper);
            using(System.IO.MemoryStream stream = new System.IO.MemoryStream(arrByte))
            {
                stream.Position = 0; //after the write the stream is at the end position is for read again
                str fileName =  strFmt("Report_%1.pdf", xGlobal::randomPositiveInt32() );
                File::SendFileToUser(stream, fileName);
            }
        }
        else if(reportConfigTable.Format == SPYReportConfigFormat::Html)
        {
            Filename fileName = strFmt('%1\\Report_%2.html',WinAPIServer::getTempPath(), xGlobal::randomPositiveInt32());
            FileIOPermission        fioPermission;
            TextStreamIo            txIoWrite;
            System.IO.StreamWriter  writer;
            InteropPermission       perm = new InteropPermission(InteropKind::ClrInterop);
            System.IO.FileStream    stream;
            #define.FileRW("RW")
            #define.FileW("W")

            perm.assert();
            writer = new System.IO.StreamWriter(fileName);
            writer.WriteLine(htmlWrapper);
            writer.Close();
            stream = System.IO.File::OpenRead(fileName);
            File::SendFileToUser(stream, fileName);
            CodeAccessPermission::revertAssert();
        }
        else if(reportConfigTable.Format == SPYReportConfigFormat::Excel)
        {
            Filename fileName = strFmt('%1\\Report_%2.xls',WinAPIServer::getTempPath(), xGlobal::randomPositiveInt32());
            FileIOPermission        fioPermission;
            TextStreamIo            txIoWrite;
            System.IO.StreamWriter  writer;
            InteropPermission       perm = new InteropPermission(InteropKind::ClrInterop);
            System.IO.FileStream    stream;
            #define.FileRW("RW")
            #define.FileW("W")

            perm.assert();
            writer = new System.IO.StreamWriter(fileName);
            writer.WriteLine(htmlWrapper);
            writer.Close();
            stream = System.IO.File::OpenRead(fileName);
            File::SendFileToUser(stream, fileName);
            CodeAccessPermission::revertAssert();
        }
    
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {               
        Map                         totalValues, filteredValues;
        Map                         payElementValues = new Map(Types::String, Types::AnyType);
        NoYesId                     useTransactionCurrency;
        QueryRun                    qEmpLoopRun;
        SPYPayrollPeriodLineRecId payrollPeriodLineRecIdFrom = contract.parmPayrollPeriodlineFrom();
        SPYPayrollPeriodLineRecId payrollPeriodLineRecIdTo = contract.parmPayrollPeriodlineTo();
        
        //depending on the R Report that is selected the expressions have to be built                
        Query                   filterQuery;
        QueryRun                queryRun;
        container               packedQuery;
        QueryBuildDataSource    qbdWorker;
        QueryBuildRange         qbrWorkerRange;
        hcmWorker               hcmWorkerRange;

        periodFromDate  = SPYPayrollPeriodLine::find(payrollPeriodLineRecIdFrom).PeriodStartDate;
        periodToDate    = SPYPayrollPeriodLine::find(payrollPeriodLineRecIdTo).PeriodEndDate;
    
        //**************************************************************************************************Payroll Ledger values
        select firstonly reportConfigTable where reportConfigTable.RecId == contract.parmReportConfigRecId();
        useTransactionCurrency = reportConfigTable.UseTransactionCurr;
        groupByWorker   = reportConfigTable.GroupByWorker;
        spyRReportsTmp.setTempDB();
        Query q = contract.getQuery();
        Query qEmpLoop = new Query(q); //create a copy for the employee loop                      
                       
        if ( groupByWorker )
        {
            //if the query has to be grouped by employee then we lool for each emp
            //apply addtional filters on q query for employee
            qEmpLoopRun = new QueryRun( qEmpLoop);
            qbdWorker = qEmpLoop.dataSourceTable(tableNum(HcmWorker));
            qbrWorkerRange = qbdWorker.addRange( fieldNum( HcmWorker, RecId ) );
            while (qEmpLoopRun.next())
            {
                //creating filtered query for each employee
                hcmWorkerRange = qEmpLoopRun.get( tableNum(HcmWorker ) );
                qbrWorkerRange.value(any2Str( hcmWorkerRange.RecId));

                //sysQuery::findOrCreateRange(qbdWorker, fieldNum(hcmWorker, RecId)).value(any2Str(hcmWorkerRange.RecId));
                

                //the values are stores in a map of maps called payElementValues
                //an map for totalValues is created for fields without filters
                //a map is created for each individul filter for the fields whcih contain a filter
                totalValues = this.createPayElementMap(qEmpLoop, null, payrollPeriodLineRecIdFrom, payrollPeriodLineRecIdTo, useTransactionCurrency);
                payElementValues.insert("totalValues", totalValues);  //added to the list with the key totalValues

                //creating the totalsMap for all the filtered fields
                while select *
                from reportConfigTable
                where reportConfigTable.RecId == contract.parmReportConfigRecId()
                join reportConfigFields
                where reportConfigFields.ReportConfig == reportConfigTable.RecId
                join ReportFilterCode  from reportConfigFieldFilter
                group by ReportFilterCode
                where reportConfigFieldFilter.RecId == reportConfigFields.ReportConfigFilter
                && reportConfigFieldFilter.Active == NoYes::Yes
                {
                    packedQuery = SPYReportConfigFilterTable::findByCode( reportConfigFieldFilter.ReportFilterCode).Query;
                    queryRun = new QueryRun(packedQuery);
                    filterQuery = queryRun.query();

                    totalValues = this.createPayElementMap(qEmpLoop, filterQuery, payrollPeriodLineRecIdFrom, payrollPeriodLineRecIdTo,useTransactionCurrency);
                    payElementValues.insert(reportConfigFieldFilter.ReportFilterCode, totalValues);      //added to the list with the filter code as key
                }
                this.createSPYReportConfigStagingRecord(hcmWorkerRange.RecId, payElementValues);
            }
        }
        else
        {
            //the values are stores in a map of maps called payElementValues
            //a map is created for amounts without filters with the hardcoded key totalValues
            //a map is created for each individul filter that is used in  the report
            totalValues = this.createPayElementMap(q, null, payrollPeriodLineRecIdFrom, payrollPeriodLineRecIdTo, useTransactionCurrency);
            payElementValues.insert("totalValues", totalValues);

            //creating the totalsMap for all the filtered fields
            while select *
            from reportConfigTable
            where reportConfigTable.RecId == contract.parmReportConfigRecId()
            join reportConfigFields
            where reportConfigFields.ReportConfig == reportConfigTable.RecId
            join ReportFilterCode  from reportConfigFieldFilter
            group by ReportFilterCode
            where reportConfigFieldFilter.RecId == reportConfigFields.ReportConfigFilter
            && reportConfigFieldFilter.Active == NoYes::Yes
            {
                packedQuery = SPYReportConfigFilterTable::findByCode( reportConfigFieldFilter.ReportFilterCode).Query;
                queryRun = new QueryRun(packedQuery);
                filterQuery = queryRun.query();

                totalValues = this.createPayElementMap(q, filterQuery, payrollPeriodLineRecIdFrom, payrollPeriodLineRecIdTo,useTransactionCurrency);
                payElementValues.insert(reportConfigFieldFilter.ReportFilterCode, totalValues);
            }
            this.createSPYReportConfigStagingRecord(0, payElementValues);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluteFieldValue</Name>
				<Source><![CDATA[
    public SPYAmount evaluteFieldValue(SPYReportConfigFieldRecId ReportConfigField, Map  payElementValues, SPYReportConfigStagingTmp _spyRReportsTmp)
    {
        SPYReportConfigFieldPayElements reportConfigFieldPayElements;
        SPYPayElementTable  payElementTable;
        SPYAmount retValue, currentAmount, fieldAmount;
        SPYExpression   expression;
        int fieldIdentifier;
        int amountMultiplier;

        while select reportConfigFieldPayElements
            order by reportConfigFieldPayElements.LineNum
            where reportConfigFieldPayElements.ReportConfigField == ReportConfigField
            outer join payElementTable
            where payElementTable.RecId == reportConfigFieldPayElements.PayElement
        {
            amountMultiplier = reportConfigFieldPayElements.InverseSign == NoYes::Yes ? -1: 1;

            if ( payElementValues.exists( payElementTable.PayElementCode) )
            {
                currentAmount = payElementValues.lookup(payElementTable.PayElementCode) * amountMultiplier;
                expression += any2Str(currentAmount);
            }
            else
            {
                currentAmount = 0.00;
                expression +=  '0.00' ;
            }

            fieldAmount = 0;
            if ( reportConfigFieldPayElements.FieldCode != "" )
            {
                fieldIdentifier =  fieldName2Id( _spyRReportsTmp.TableId, reportConfigFieldPayElements.FieldCode );
                if ( fieldIdentifier)
                {
                    fieldAmount = _spyRReportsTmp.( fieldIdentifier ) * amountMultiplier;
                }
            }


            switch ( reportConfigFieldPayElements.Operator)
            {
                case SPYReportConfigFieldOperator::Plus :
                    expression += " + ";
                    retValue += ( currentAmount + fieldAmount );
                    break;
                case SPYReportConfigFieldOperator::Minus :
                    expression += " - ";
                    retValue -= ( currentAmount + fieldAmount );
                    break;
                case SPYReportConfigFieldOperator::Multiply :
                    expression += " * ";
                    retValue = retValue * ( currentAmount + fieldAmount );
                    break;
                case SPYReportConfigFieldOperator::Divide:
                    expression += " / ";
                    retValue = retValue / ( currentAmount + fieldAmount );
                    break;
                default:
                    retValue = ( currentAmount + fieldAmount );
            }
        }

        //Info( expression);
        return (retValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayElementMap</Name>
				<Source><![CDATA[
    public  Map createPayElementMap(Query baseWorkerQuery, Query filterQuery, recID periodFrom, RecId periodTo, NoYesID showInTranCurr)
    {
        QueryBuildDataSource            qdbPayrollLedger, qdbHcmWorker, qdbCommon, qdbSourceParent, qdbCommonParent, qdbCurrentSource;
        QueryBuildDataSource            qbdPayrollJournalLine, qbdPayrollJournal, qdbBenefitLedger, qdbReferenceLedger, qbdLastDataSource;
        QueryBuildLink                  payElementLink;
        QueryBuildDataSource            qbdPayElement1, qbdPayElement2, qbdPayElement3;
        QueryBuildRange                 rangePeriod;
        QueryRun                        qr;
        Query                           finalQuery;
        SPYPayElementTable              payElementTable;
        SPYBenefitLedger                benefitLedgerTable;
        SPYReferencePayElementLedger    referenceLedgerTable;
        QueryBuildLink                  link;
        TableId                         parentTable;
        Map                             payElementValues = new Map(Types::String, Types::Real);
        Map                             payElementValuesTranCurr = new Map(Types::String, Types::Real);
    

        finalQuery = new Query(baseWorkerQuery);

        if ( filterQuery != null )
        {
            //start by looping for all the datasources in the source query and find the common datasource in target query
            //if a common datasource is found, then merge the ranges. If not found try to find the parent if a common parent
            //is found then add the datasource below the right parent and merge the ranges

            for (int ctr = 1; ctr <= filterQuery.dataSourceCount(); ctr ++)
            {
                //check if a common datasource/table exists between the two queries
                qdbCurrentSource = filterQuery.dataSourceNo(ctr);
                qdbCommon = finalQuery.dataSourceTable(qdbCurrentSource.table());

                if (!qdbCommon) //if a common table is not found then look for a parent
                {
                    parentTable = qdbCurrentSource.parentDataSource().file();

                    if (parentTable)
                    {
                        qdbCommonParent = finalQuery.dataSourceTable(parentTable);
                        if (qdbCommonParent) //if the parent is found then add the current datasource to the common parent
                        {
                            qdbCommon = qdbCommonParent.addDataSource(qdbCurrentSource.table());
                            qdbCommon.fetchMode(QueryFetchMode::One2One); //IMPORTANT without this the query can get seperated
                            
                            for( int intLinkCtr=1; intLinkCtr<= filterQuery.dataSourceNo(ctr).linkCount(); intLinkCtr ++)
                            {
                                link = filterQuery.dataSourceNo(ctr).link(intLinkCtr) ;
                                if ( link.relatedField() == 0)
                                {
                                    qdbCommon.relations(true); //this only works between the parent and current datasource
                                }
                                else
                                {
                                    qdbCommon.joinMode( filterQuery.dataSourceNo(ctr).joinMode() );
                                    qdbCommon.addLink( link.field(), link.relatedField() );
                                }
                            }
                            //link counter

                            SysQuery::mergeRanges(finalQuery, filterQuery, ctr, false, true);
                            SysQuery::mergeFilters( filterQuery, finalQuery,ctr,true,false);
                        }
                        //common parent
                    }
            
                    if (!qdbCommon)
                    {
                        qdbCommon = finalQuery.addDataSource(filterQuery.dataSourceNo(ctr).table());
                        qdbCommon.relations(true);
                    }
            
                }
                else
                {
                    SysQuery::mergeRanges(finalQuery, filterQuery, ctr, false, true);
                    SysQuery::mergeFilters( filterQuery, finalQuery,ctr,true,false);
                }
            }

            SysQuery::copyDynalinks(finalQuery,filterQuery);
        }
        //filterQuery is null
    

        //**************************************************************************************************Payroll Ledger values
        qdbHcmWorker = finalQuery.dataSourceTable(tableNum(HcmWorker));
        qdbPayrollLedger = qdbHcmWorker.addDataSource(tableNum(SPYPayrollLedger),"SPYPayrollLedger");
        qdbPayrollLedger.joinMode(JoinMode::InnerJoin);
        qdbPayrollLedger.Relations(true);
        qdbPayrollLedger.fetchMode(QueryFetchMode::One2One);
        qdbPayrollLedger.addSelectionField(fieldNum(SPYPayrollLedger, AccountingCurrencyAmount), SelectionField::Sum);
        qdbPayrollLedger.addSelectionField(fieldNum(SPYPayrollLedger, TransactionCurrencyAmount), SelectionField::Sum);
        qdbPayrollLedger.addGroupByField( fieldNum(SPYPayrollLedger, Payroll));
        qdbPayrollLedger.orderMode(OrderMode::GroupBy);
        rangePeriod = qdbPayrollLedger.addRange(fieldNum(SPYPayrollLedger, PayrollPeriodLine));
        rangePeriod.value(strFmt("%1..%2",queryValue(periodFrom),queryValue(periodTo) ) );
        
        qr = new QueryRun(finalQuery);
        while(qr.next())
        {
            payrollLedger       = qr.get(tableNum(SPYPayrollLedger));
            payElementTable   = SPYPayElementTable::find( payrollLedger.Payroll);
            payElementValues.insert( payElementTable.PayElementCode, payrollLedger.AccountingCurrencyAmount );
            payElementValuesTranCurr.insert( payElementTable.PayElementCode, payrollLedger.TransactionCurrencyAmount );
        }
        
        baseWorkerQuery.clearGroupBy(); //group on payelement is added to HCMWorker clear it before the next filter
        qdbPayrollLedger.enabled(false);     //once payroll ledger is disabled the datasource below this are also disabled.
        //**************************************************************************************************Payroll Ledger values

        //**************************************************************************************************Benefit Ledger values
        qdbHcmWorker = finalQuery.dataSourceTable(tableNum(HcmWorker));
        qdbBenefitLedger = qdbHcmWorker.addDataSource(tableNum(SPYBenefitLedger),"SPYBenefitLedger");
        qdbBenefitLedger.joinMode(JoinMode::InnerJoin);
        qdbBenefitLedger.Relations(true);
        qdbBenefitLedger.fetchMode(QueryFetchMode::One2One);
        qdbBenefitLedger.addSelectionField(fieldNum(SPYBenefitLedger, AccountingCurrencyAmount), SelectionField::Sum);
        qdbBenefitLedger.addSelectionField(fieldNum(SPYBenefitLedger, TransactionCurrencyAmount), SelectionField::Sum);
        qdbBenefitLedger.addSelectionField(fieldNum(SPYBenefitLedger, AccountingCurPnLAmount), SelectionField::Sum);
        qdbBenefitLedger.addSelectionField(fieldNum(SPYBenefitLedger, TransactionCurPnLAmount), SelectionField::Sum);
        qdbBenefitLedger.orderMode(OrderMode::GroupBy);
        qdbBenefitLedger.addGroupByField(fieldNum(SPYBenefitLedger, Benefit));
        rangePeriod = qdbBenefitLedger.addRange(fieldNum(SPYBenefitLedger, PayrollPeriodLine));
        rangePeriod.value(strFmt("%1..%2",queryValue(periodFrom),queryValue(periodTo) ) );

        qr = new QueryRun(finalQuery);
        while(qr.next())
        {
            benefitLedgerTable   = qr.get(tableNum(SPYBenefitLedger));
            payElementTable = SPYPayElementTable::find(benefitLedgerTable.Benefit);
            payElementValues.insert( payElementTable.PayElementCode, benefitLedgerTable.AccountingCurrencyAmount + benefitLedgerTable.AccountingCurPnLAmount);
            payElementValuesTranCurr.insert( payElementTable.PayElementCode, benefitLedgerTable.TransactionCurrencyAmount + benefitLedgerTable.TransactionCurPnLAmount);
        }

        baseWorkerQuery.clearGroupBy(); //group on payelement is added to HCMWorker clear it before the next filter
        qdbBenefitLedger.enabled(false);
        //**************************************************************************************************Benefit Ledger values


        //**************************************************************************************************Reference Ledger values
        qdbHcmWorker = finalQuery.dataSourceTable(tableNum(HcmWorker));
        qdbReferenceLedger = qdbHcmWorker.addDataSource(tableNum(SPYReferencePayElementLedger),"SPYReferencePayElementLedger");
        qdbReferenceLedger.joinMode(JoinMode::InnerJoin);
        qdbReferenceLedger.Relations(true);
        qdbReferenceLedger.addSelectionField(fieldNum(SPYReferencePayElementLedger, AccountingCurrencyAmount), SelectionField::Sum);
        qdbReferenceLedger.addSelectionField(fieldNum(SPYReferencePayElementLedger, TransactionCurrencyAmount), SelectionField::Sum);
        qdbReferenceLedger.addGroupByField( fieldNum(SPYReferencePayElementLedger, PayElement));
        qdbReferenceLedger.fetchMode(QueryFetchMode::One2One);
        qdbReferenceLedger.orderMode(OrderMode::GroupBy);
        rangePeriod = qdbReferenceLedger.addRange(fieldNum(SPYReferencePayElementLedger, PayrollPeriodLine));
        rangePeriod.value(strFmt("%1..%2",queryValue(periodFrom),queryValue(PeriodTo) ) );
        
        qr = new QueryRun(finalQuery);
        while(qr.next())
        {
            referenceLedgerTable   = qr.get(tableNum(SPYReferencePayElementLedger));
            payElementTable = SPYPayElementTable::find( referenceLedgerTable.PayElement);
            payElementValues.insert( payElementTable.PayElementCode, referenceLedgerTable.AccountingCurrencyAmount );
            payElementValuesTranCurr.insert( payElementTable.PayElementCode, referenceLedgerTable.TransactionCurrencyAmount );
        }

        baseWorkerQuery.clearGroupBy(); //group on payelement is added to HCMWorker clear it before the next filter
        qdbReferenceLedger.enabled(false);
        baseWorkerQuery.clearQueryFilters();
        //**************************************************************************************************Reference Ledger values


        if ( showInTranCurr == NoYes::Yes )
            return( payElementValuesTranCurr );
        else
            return( payElementValues );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSPYReportConfigStagingRecord</Name>
				<Source><![CDATA[
    private void createSPYReportConfigStagingRecord(RefRecId  worker, Map payElementValues)
    {
        Common                  common;
        int                     fieldIdentifier;
        Map                     totalValues = new Map(Types::String, Types::AnyType);

        //evaluating the expressions
        spyRReportsTmp.initValue();
        common = spyRReportsTmp;
        while select *
            from reportConfigTable
            where reportConfigTable.RecId == contract.parmReportConfigRecId()
            join reportConfigFields
            order by reportConfigFields.SPYReportConfigSequence asc
            where reportConfigFields.ReportConfig == reportConfigTable.RecId
            outer join reportConfigFieldFilter
            where reportConfigFieldFilter.RecId == reportConfigFields.ReportConfigFilter
            && reportConfigFieldFilter.Active == NoYes::Yes
        {
            if (reportConfigFieldFilter.Active == NoYes::Yes)
            {
                totalValues = payElementValues.lookup (  reportConfigFieldFilter.ReportFilterCode);
            }
            else
            {
                totalValues = payElementValues.lookup ("totalValues");
            }

            fieldIdentifier =  fieldName2Id( common.TableId, reportConfigFields.FieldCode);
            if ( fieldIdentifier)
            {
                common.( fieldIdentifier ) = this.evaluteFieldValue( reportConfigFields.RecId, totalValues, spyRReportsTmp);
            }
        }

        ttsbegin;
        spyRReportsTmp.worker = worker;
        spyRReportsTmp.insert();
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parseHtml</Name>
				<Source><![CDATA[
    private void parseHtml(str _html)
    {        
        int pos = 0;
        int  bodyStart = strScan(_html, "<tbody>", pos, strLen(_html));
        if(bodyStart)
        {
            int  bodyEnd = strScan(_html, "</tbody>", pos, strLen(_html));
            if(bodyEnd)
            {
                 bodyHtml = subStr(_html, bodyStart + 8, bodyEnd - bodyStart - 8);
                 headerHtml = strReplace(_html, bodyHtml, "<$header>");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>