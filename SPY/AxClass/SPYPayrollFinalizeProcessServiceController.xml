<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SPYPayrollFinalizeProcessServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SPYPayrollFinalizeProcessServiceController extends SysOperationServiceController
{
    FormRun                                         payrollFinalizeProcessEdit;
    SPYPayrollFinalizeProcessContract     payrollFinalizeProcessContract;
    SPYPayrollParameterState                 payrollParameterState;
    boolean     calledFromEOS;
    SPYEOSRunTable                 eosRunTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public IDialogable dialog()
    {
        if (!payrollFinalizeProcessEdit)
        {
            payrollFinalizeProcessEdit = classfactory.formRunClass(SPYPayrollFinalizeProcessServiceController::newClientArgs(formStr(SPYPayrollFinalizeProcessEdit), this));
            payrollFinalizeProcessEdit.init();
        }
    
        return payrollFinalizeProcessEdit as IDialogable;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogMake</Name>
				<Source><![CDATA[
    protected IDialogable dialogMake()
    {
        IDialogable dlg = this.dialog();
    
        if (this.canGoBatch())
           this.batchInfo().dialog(dlg);
    
        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    protected void dialogPostRun()
    {
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    protected void  cleanupDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRun</Name>
				<Source><![CDATA[
    protected SysOperationStartResult dialogRun()
    {
        SysOperationStartResult result;
        CompanyId               companyId = curext();

        result = super();

        if (result == SysOperationStartResult::Canceled)
        {
            this.cleanupDialog();
        }

        if(companyId != curext())
        {
            appl.setDefaultCompany(companyId, false);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollFinalizeProcessContract</Name>
				<Source><![CDATA[
    public SPYPayrollFinalizeProcessContract getPayrollFinalizeProcessContract()
    {
        return payrollFinalizeProcessContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayrollParameterState</Name>
				<Source><![CDATA[
    public SPYPayrollParameterState parmPayrollParameterState(SPYPayrollParameterState _payrollParameterState = payrollParameterState)
    {
        payrollParameterState = _payrollParameterState;
    
        return payrollParameterState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceContract</Name>
				<Source><![CDATA[
    public SPYPayrollFinalizeProcessContract parmServiceContract(SPYPayrollFinalizeProcessContract _payrollFinalizeProcessContract = payrollFinalizeProcessContract)
    {
        payrollFinalizeProcessContract = _payrollFinalizeProcessContract;
        return payrollFinalizeProcessContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromEOS</Name>
				<Source><![CDATA[
    public boolean parmCalledFromEOS(boolean _calledFromEOS = calledFromEOS)
    {
        calledFromEOS = _calledFromEOS;
    
        return calledFromEOS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEOSRunTable</Name>
				<Source><![CDATA[
    public SPYEOSRunTable parmEOSRunTable(SPYEOSRunTable _eosRunTable = eosRunTable)
    {
        eosRunTable = _eosRunTable;
        return eosRunTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SPYPayrollFinalizeProcessServiceController construct(IdentifierName _className  = '',
                                                                                        IdentifierName _methodName = '',
                                                                                        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return new SPYPayrollFinalizeProcessServiceController(_className,_methodName,_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SPYPayrollFinalizeProcessServiceController    payrollFinalizeProcessServiceController;
        str                                                             className, methodName;
        SysOperationExecutionMode                       mode;
    
        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(args);
        mode = SysOperationExecutionMode::Synchronous;
        payrollFinalizeProcessServiceController = SPYPayrollFinalizeProcessServiceController::construct(className, methodName, mode);
    
        if(args.menuItemName() == menuItemActionStr(SPYPayrollFinalizeProcessEOSServiceController))
        {
            payrollFinalizeProcessServiceController.parmCalledFromEOS(true);
            payrollFinalizeProcessServiceController.parmEOSRunTable(args.record());
        }
        else
        {
            if(args.caller() && args.caller().payrollParameterState())
                payrollFinalizeProcessServiceController.parmPayrollParameterState(args.caller().payrollParameterState());
        }
    
        if(payrollFinalizeProcessServiceController.prompt())
            payrollFinalizeProcessServiceController.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newClientArgs</Name>
				<Source><![CDATA[
    client static Args  newClientArgs(str _formName, SPYPayrollFinalizeProcessServiceController _payrollFinalizeProcessServiceController)
    {
        Args  args = new  Args();
        args.name(_formName);
        args.caller(_payrollFinalizeProcessServiceController);
        return args;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>